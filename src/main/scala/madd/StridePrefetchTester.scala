package madd

import chisel3._
import chisel3.iotesters.PeekPokeTester
import chisel3.util._
import scala.collection.mutable.Set
import scala.collection.mutable.ArrayBuffer

import chisel3.stage.ChiselGeneratorAnnotation
import chisel3.stage.ChiselStage

class StridePrefetchTester(dut: StridePrefetch)
    extends PeekPokeTester(dut) {
      
  val testPointNum = 7
  val numAccesses = new Array[Int](testPointNum)
  numAccesses(0)=32
  numAccesses(1)=32
  numAccesses(2)=32
  numAccesses(3)=32
  numAccesses(4)=32
  var trace = new Array[Array[(Int, Int)]](testPointNum)
  val tracename = Array("pc小 address顺序", "address重复", "address完全随机","pc随机","address 步长变化","二维数组访问","图的访问")
  for (i <- 0 until 5) {
    //(pc,address)
    trace(i) = new Array[(Int, Int)](numAccesses(i))
    
  }
  for (i <- 0 until numAccesses(0)) {
    trace(0)(i) = ((i*4/numAccesses(0)+1, i * 8 % 1024))
  }
  for (i <- 0 until numAccesses(1)) {
    if(i<4){
      trace(1)(i) = (1, scala.util.Random.nextInt(100))
    }else{
      trace(1)(i)=(1,trace(1)(i-4)._2)
    }
  }
  for (i <- 0 until numAccesses(2)) {
    trace(2)(i) = ((i*4/numAccesses(2)+1, scala.util.Random.nextInt(100)))
  }
  for (i <- 0 until numAccesses(3)) {
    trace(3)(i) = ((scala.util.Random.nextInt(100), i * 8 % 1024))
  }
  for (i <- 0 until numAccesses(4)) {
    trace(4)(i) = ((1, i * (i/8+1) % 1024))
  }
  val trace5=ArrayBuffer[(Int,Int)]((1,3),(1,46),(1,46),(1,3),(1,5),(1,48),(1,48),(1,5),(1,45),(1,88),(1,88),(1,45),(1,48),(1,91),(1,91),(1,48),(1,2),(1,3),(1,3),(1,2),(1,3),(1,4),(1,4),(1,3),(1,4),(1,5),(1,5),(1,4),(1,45),(1,46),(1,46),(1,45),(1,46),(1,47),(1,47),(1,46),(1,89),(1,90),(1,90),(1,89),(1,90),(1,91),(1,91),(1,90),(1,1),(1,1),(1,88),(1,88),(1,44),(1,44),(1,87),(1,87),(1,5),(1,5),(1,1),(1,2),(1,3),(1,4),(1,5),(1,44),(1,45),(1,46),(1,47),(1,48),(1,87),(1,88),(1,89),(1,90),(1,91))
  trace(5)=trace5.toArray
  numAccesses(5)=trace(5).length

  val trace6=ArrayBuffer[(Int,Int)](
  (0,127875),(0,393721),(0,50382),(0,485915),(0,170373),(0,456949),(0,419087),(0,450394),(0,212173),(0,96772),(0,22606),(0,181569),(0,244915),(0,46874),(0,181946),(0,391245),(0,85175),(0,189489),(0,36881),(0,157008),(0,296447),(0,255362),(0,421149),(0,114813),(0,94221),(0,94729),(0,309277),(0,362772),(0,476097),(0,246532),(0,419900),(0,23140),(0,235133),(0,77180),(0,377721),(0,423805),(0,269782),(0,228274),(0,322847),(0,14294),(0,272949),(0,377651),(0,390501),(0,56748),(0,221304),(0,380624),(0,25715),(0,419533),(0,402922),(0,394925),(0,341412),(0,354256),(0,361006),(0,184758),(0,167210),(0,311492),(0,12869),(0,366627),(0,414720),(0,64879),(0,238082),(0,190336),(0,364736),(0,345198),(0,325750),(0,427631),(0,60673),(0,211243),(0,492783),(0,13428),(0,407132),(0,345438),(0,204148),(0,78556),(0,8361),(0,184158),(0,477597),(0,304759),(0,283193),(0,91917),(0,274304),(0,23806),(0,319475),(0,307705),(0,371426),(0,481057),(0,401420),(0,142590),(0,111181),(0,71855),(0,460501),(0,34677),(0,496303),(0,384741),(0,73030),(0,219776),(0,299038),(0,495669),(0,249137),(0,176336),(0,338530),(0,420319),(0,427301),(0,373284),(0,291714),(0,53300),(0,490775),(0,217680),(0,400079),(0,308418),(0,353179),(0,354769),(0,156857),(0,281640),(0,236755),(0,45063),(0,162532),(0,431118),(0,206381),(0,301208),(0,5810),(0,113373),(0,62810),(0,141308),(0,468099),(0,304052),(0,285837),(0,461174),(0,178417),(0,278693),(0,415808),(0,133268),(0,268766),(0,312586),(0,339358),(0,66412),(0,324734),(0,22057),(0,467233),(0,163693),(0,278254),(0,24297),(0,225397),(0,37213),(0,87555),(0,96232),(0,419235),(0,95284),(0,250007),(0,344200),(0,349209),(0,128680),(0,480856),(0,342929),(0,366324),(0,420364),(0,130038),(0,460121),(0,264692),(0,370074),(0,58558),(0,94013),(0,311544),(0,271881),(0,282507),(0,494670),(0,91476),(0,320035),(0,115021),(0,35161),(0,410211),(0,366445),(0,33060),(0,315166),(0,11212),(0,65361),(0,329734),(0,233557),(0,441348),(0,409063),(0,329688),(0,157309),(0,352757),(0,395332),(0,331305),(0,347600),(0,305325),(0,35822),(0,93284),(0,127642),(0,282378),(0,364053),(0,496129),(0,239067),(0,336950),(0,87504),(0,270924),(0,83041),(0,177550),(0,357846),(0,375440),(0,328431),(0,200251),(0,268466),(0,446996),(0,40700),(0,141313),(0,118158),(0,3271),(0,115622),(0,125233),(0,102195),(0,14476),(0,316993),(0,346651),(0,284560),(0,343195),(0,147914),(0,471150),(0,304941),(0,124092),(0,303303),(0,117344),(0,365295),(0,440955),(0,244514),(0,94313),(0,413826),(0,58670),(0,44133),(0,253826),(0,135287),(0,391131),(0,369105),(0,473599),(0,330911),(0,348730),(0,174571),(0,231559),(0,87853),(0,147507),(0,90901),(0,312126),(0,388836),(0,108832),(0,228031),(0,345140),(0,131059),(0,270093),(0,166754),(0,108339),(0,43914),(0,34571),(0,385636),(0,481007),(0,192520),(0,427965),(0,274113),(0,357504),(0,143733),(0,413803),(0,43175),(0,468851),(0,243006),(0,440423),(0,444232),(0,330983),(0,66843),(0,383776),(0,421432),(0,60360),(0,332198),(0,349954),(0,272372),(0,85486),(0,153480),(0,468649),(0,259572),(0,185120),(0,139862),(0,68535),(0,407931),(0,226676),(0,88113),(0,21935),(0,29062),(0,381994),(0,189565),(0,309042),(0,152135),(0,201380),(0,328846),(0,157509),(0,152187),(0,88766),(0,364260),(0,144385),(0,377949),(0,215143),(0,132908),(0,319909),(0,308789),(0,201236),(0,2164),(0,379480),(0,191006),(0,462427),(0,216350),(0,159876),(0,423656),(0,54564),(0,373985),(0,2324),(0,318361),(0,357356),(0,398217),(0,363269),(0,495814),(0,196554),(0,145960),(0,176732),(0,405951),(0,90654),(0,47732),(0,405172),(0,127909),(0,434331),(0,191291),(0,17103),(0,436847),(0,123561),(0,159607),(0,251838),(0,99506),(0,287589),(0,21570),(0,463642),(0,374405),(0,485101),(0,35215),(0,374996),(0,176711),(0,206726),(0,212684),(0,332222),(0,271560),(0,384223),(0,84624),(0,490153),(0,247209),(0,237239),(0,190024),(0,57271),(0,197526),(0,11599),(0,433866),(0,392713),(0,494135),(0,109963),(0,454011),(0,319381),(0,372138),(0,145588),(0,81525),(0,7239),(0,32810),(0,143185),(0,52636),(0,253357),(0,421344),(0,198021),(0,194021),(0,172881),(0,301516),(0,489345),(0,415687),(0,378333),(0,314394),(0,244031),(0,374216),(0,244945),(0,280752),(0,396639),(0,142997),(0,282367),(0,83083),(0,279515),(0,336800),(0,92094),(0,162186),(0,17618),(0,417327),(0,363225),(0,335210),(0,182628),(0,236099),(0,22870),(0,298404),(0,262234),(0,179485),(0,5515),(0,460208),(0,43954),(0,309383),(0,79133),(0,265462),(0,225709),(0,115983),(0,236856),(0,213657),(0,70000),(0,182954),(0,464178),(0,115863),(0,133958),(0,488928),(0,29462),(0,316056),(0,74526),(0,395916),(0,271542),(0,25614),(0,376077),(0,321137),(0,69196),(0,165034),(0,383918),(0,15630),(0,266920),(0,325148),(0,294938),
  (0,307800),(0,440598),(0,415054),(0,56431),(0,172552),(0,380945),(0,395898),(0,61645),(0,272451),(0,436374),(0,220325),(0,189047),(0,444302),(0,476161),(0,215304),(0,329462),(0,55043),(0,91737),(0,6120),(0,447861),(0,498221),(0,102938),(0,307399),(0,424809),(0,26397),(0,374619),(0,202951),(0,246133),(0,33341),(0,100844),(0,195872),(0,274358),(0,325574),(0,353136),(0,118237),(0,243167),(0,431169),(0,22815),(0,127457),(0,344412),(0,323449),(0,261687),(0,329491),(0,476915),(0,425842),(0,466185),(0,443419),(0,298444),(0,182758),(0,402953),(0,57394),(0,366319),(0,467984),(0,42951),(0,284829),(0,275258),(0,49373),(0,24410),(0,444707),(0,379211),(0,45893),(0,301241),(0,473177),(0,434618),(0,165429),(0,350248),(0,357120),(0,310527),(0,59746),(0,29602),(0,127737),(0,329833),(0,77459),(0,435535),(0,88080),(0,69498),(0,327935),(0,498675),(0,84030),(0,378473),(0,458752),(0,72925),(0,260931),(0,184478),(0,281112),(0,75049),(0,164229),(0,415813),(0,115961),(0,66711),(0,322347),(0,296619),(0,237634),(0,338448),(0,18862),(0,473598),(0,96153),(0,446096),(0,206950),(0,62523),(0,424519),(0,186641),(0,426770),(0,306261),(0,361005),(0,370464),(0,215775),(0,27246),(0,71686),(0,432887),(0,300484),(0,276093),(0,252099),(0,236451),(0,198286),(0,47771),(0,232406),(0,321281),(0,459460),(0,417217),(0,49249),(0,75343),(0,224715),(0,65358),(0,436622),(0,363063),(0,278126),(0,276191),(0,33038),(0,312022),(0,44234),(0,482222),(0,195368),(0,71172),(0,144528),(0,71891),(0,322683),(0,279682),(0,440119),(0,206440),(0,337184),(0,40644),(0,259423),(0,91148),(0,204817),(0,234824),(0,157591),(0,328619),(0,338837),(0,429680),(0,129267),(0,380006),(0,3032),(0,41250),(0,315631),(0,66325),(0,205758),(0,253896),(0,479679),(0,189417),(0,262109),(0,157609),(0,264826),(0,166851),(0,340361),(0,93587),(0,186439),(0,440821),(0,176251),(0,440288),(0,242748),(0,421572),(0,153325),(0,425091),(0,320283),(0,101122),(0,193381),(0,379919),(0,295160),(0,418732),(0,459919),(0,178750),(0,281772),(0,259892),(0,11265),(0,296991),(0,192376),(0,360008),(0,390646),(0,334102),(0,294384),(0,496221),(0,236279),(0,289084),(0,481047),(0,387653),(0,78125),(0,63379),(0,176478),(0,199525),(0,348622),(0,229241),(0,447078),(0,218932),(0,229138),(0,283606),(0,373146),(0,94217),(0,43676),(0,180834),(0,223042),(0,120293),(0,192827),(0,75004),(0,346318),(0,5768),(0,393772),(0,450599),(0,194935),(0,449284),(0,135058),(0,202995),(0,490649),(0,462961),(0,256391),(0,96080),(0,403272),(0,482283),(0,336305),(0,485184),(0,256929),(0,253965),(0,57087),(0,474409),(0,421327),(0,55290),(0,265951),(0,296461),(0,354068),(0,437343),(0,280011),(0,15473),(0,474716),(0,121035),(0,402643),(0,428759),(0,265266),(0,440867),(0,121230),(0,13554),(0,326531),(0,388101),(0,480356),(0,169980),(0,299652),(0,65344),(0,72063),(0,89113),(0,333866),(0,324958),(0,302982),(0,113174),(0,181271),(0,9712),(0,399837),(0,47662),(0,92217),(0,336082),(0,295331),(0,382688),(0,410494),(0,490424),(0,167678),(0,142735),(0,68551),(0,245189),(0,146068),(0,375765),(0,93356),(0,477563),(0,373813),(0,88051),(0,294878),(0,24705),(0,168674),(0,393213),(0,222091),(0,193182),(0,425759),(0,293610),(0,39512),(0,440129),(0,408721),(0,246964),(0,287857),(0,316379),(0,364754),(0,207962),(0,129192),(0,348265),(0,216922),(0,40843),(0,346165),(0,421675),(0,140988),(0,411539),(0,256190),(0,318879),(0,197036),(0,108927),(0,379002),(0,335102),(0,198346),(0,483804),(0,453027),(0,130768),(0,238417),(0,435157),(0,100200),(0,17618),(0,483311),(0,448363),(0,368593),(0,41353),(0,473015),(0,483489),(0,128029),(0,138094),(0,106979),(0,318648),(0,491280),(0,34334),(0,128630),(0,274931),(0,497131),(0,78679),(0,448440),(0,145895),(0,1711),(0,310105),(0,110175),(0,168240),(0,251891),(0,149921),(0,378204),(0,205082),(0,115849),(0,172926),(0,50992),(0,422012),(0,170440),(0,456047),(0,188591),(0,217903),(0,458145),(0,464263),(0,294865),(0,107610),(0,144032),(0,279826),(0,303335),(0,370808),(0,425797),(0,7296),(0,403921),(0,153660),(0,119458),(0,328262),(0,384951),(0,15531),(0,316632),(0,26155),(0,53156),(0,426373),(0,431654),(0,44032),(0,416936),(0,245562),(0,207625),(0,135651),(0,363273),(0,84084),(0,408534),(0,325603),(0,494316),(0,30406),(0,29618),(0,285306),(0,457910),(0,270659),(0,498407),(0,36157),(0,496191),(0,28069),(0,189914),(0,227894),(0,128815),(0,494961),(0,364034),(0,187225),(0,287064),(0,84577),(0,231309),(0,187582),(0,182104),(0,492996),(0,109297),(0,58936),(0,352308),(0,354773),(0,50261),(0,264636),(0,396884),(0,473598),(0,478201),(0,145216),(0,359028),(0,338448),(0,18862),(0,430620),(0,486601),(0,57997),(0,458591),(0,121151),(0,267053),(0,32170),(0,402572),(0,451390),(0,479014),(0,71517),
  (0,114958),(0,433672),(0,355362),(0,106245),(0,11618),(0,330686),(0,317452),(0,472570),(0,246506),(0,358497),(0,178767),(0,372419),(0,416057),(0,21612),(0,307430),(0,20398),(0,165572),(0,123580),(0,371841),(0,171842),(0,134775),(0,374128),(0,307409),(0,164357),(0,61208),(0,397142),(0,242259),(0,239046),(0,45953),(0,337986),(0,311443),(0,456173),(0,68638),(0,114654),(0,118234),(0,407849),(0,352818),(0,392369),(0,101593),(0,256952),(0,157955),(0,88977),(0,405874),(0,20328),(0,13957),(0,22672),(0,277670),(0,451641),(0,161460),(0,280724),(0,184159),(0,398048),(0,31270),(0,415733),(0,99667),(0,203129),(0,425639),(0,449547),(0,416040),(0,108376),(0,272634),(0,325433),(0,178452),(0,414831),(0,374781),(0,291114)
  )
  trace(6)=trace6.toArray
  numAccesses(6)=trace(6).length

  for (i<- 0 until testPointNum){
    val cache:Set[Int] = Set()
    val pre_cache:Set[Int] = Set()
    var Hits=0
    var preOperator=0
    var access=0
    poke(dut.io.pc,0)
    poke(dut.io.reset, 1)
    step(1)
    poke(dut.io.reset, 0)
    step(1)
    
    
    
    for (j<- 0 until numAccesses(i)){
      poke(dut.io.pc, trace(i)(j)._1)
      poke(dut.io.address, trace(i)(j)._2)
      poke(dut.io.enable,1)
      while(peek(dut.io.ready)==0){
        step(1)
      }
      //scala.Predef.printf(s"[Tester] pc: ${trace(i)(j)._1} address: ${trace(i)(j)._2} valid: ${peek(dut.io.prefetch_valid)} prefetch_address: ${peek(dut.io.prefetch_address)} \n");
      
      val address=trace(i)(j)._2
      if(pre_cache.contains(address)){
        cache+=address
        pre_cache-=address
        access+=1
      }
      if(cache.contains(address)){
        Hits+=1
      }


      if(peek(dut.io.prefetch_valid)==1){
        val pre_address=peek(dut.io.prefetch_address).toInt
        if((!pre_cache.contains(pre_address))){
          if(cache.contains(pre_address)){
            cache-=pre_address
          }
          preOperator+=1
          pre_cache+=pre_address
        }
      }
      if((!pre_cache.contains(address)) && (!cache.contains(address))){
        cache+=address
      }
      
      poke(dut.io.enable,0)
      poke(dut.io.pc, 0)
      while(peek(dut.io.ready)==1){
        step(1)
      }
    }
    
    scala.Predef.printf(s"[Tester] 测试集名称: ${tracename(i)}\n")
    scala.Predef.printf(s"缓存命中率: ${Hits.toDouble/numAccesses(i)} 预取行动率: ${preOperator.toDouble/numAccesses(i)} 预取有效率 ${access.toDouble/preOperator} 预取产生的总收益率 ${access.toDouble/numAccesses(i)}\n");
    scala.Predef.printf("-----------------\n");

    poke(dut.io.reset, 0)
    
  }
}

object StridePrefetchTester extends App {
  
  chisel3.iotesters.Driver(() => new StridePrefetch(32, 32)) { dut =>
    new StridePrefetchTester(dut)
  }
}